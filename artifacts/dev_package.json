{
	"id": "405a932e-033f-ed11-a27c-a04a5ebc99b7",
	"createdAt": "2022-09-28T07:57:22.750Z",
	"createdBy": "kristin.eliassen@neptune-software.com",
	"git": {
		"targetServers": [],
		"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-datamodeller",
		"testServers": []
	},
	"name": "neptunesoftware-dxp-abb-datamodeller",
	"description": null,
	"ver": "23.6.20.1010",
	"enableCICD": true,
	"apps": [
		{
			"id": "c8dd3176-877f-48de-aaa1-925681c5a730",
			"application": "neptune_modeller_tables",
			"title": "",
			"description": "",
			"package": {
				"id": "405a932e-033f-ed11-a27c-a04a5ebc99b7",
				"createdAt": "2022-09-28T07:57:22.750Z",
				"updatedAt": "2023-09-19T13:56:17.257Z",
				"createdBy": "kristin.eliassen@neptune-software.com",
				"changedBy": "kristin.eliassen@neptune-software.com",
				"git": {
					"targetServers": [],
					"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-datamodeller",
					"testServers": [],
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"14.16.0\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^26.0.23\",",
						"    \"typescript\": \"^4.2.3\",",
						"    \"ts-node\": \"^10.0.0\",",
						"    \"axios\": \"^0.21.1\",",
						"    \"jest\": \"^27.0.4\",",
						"    \"ts-jest\": \"^27.0.3\"",
						"  }",
						"}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from \"fs\";",
						"",
						"const servers = (process.env.P9_SERVER_URL && process.env.P9_SERVER_TOKEN)",
						"    ? [{url: process.env.P9_SERVER_URL, token: process.env.P9_SERVER_TOKEN}]",
						"    : JSON.parse(`[]`);",
						"",
						"const agent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"const packageRelationsAndEntityType: {",
						"    name: string;",
						"    entity: string;",
						"    entityName?: string;",
						"    relations?: string[];",
						"    dependencies?: string[];",
						"}[] = [",
						"    { name: 'role', entity: 'role', entityName: 'Role' },",
						"    { name: 'wf_notifications', entity: 'wf_notifications', entityName: 'Email Template' },",
						"    { name: 'certificates', entity: 'certificates', entityName: 'Certificates' },",
						"    { name: 'odataMock', entity: 'odata_mockdata', entityName: 'oDataMock' },",
						"    { name: 'theme', entity: 'theme', entityName: 'Theme' },",
						"    { name: 'pdf', entity: 'pdf', entityName: 'PDF' },",
						"    { name: 'doc', entity: 'doc', entityName: 'Documentation' },",
						"    { name: 'jsscript_group', entity: 'jsscript_group', entityName: 'Script Project' },",
						"    { name: 'script_scheduler', entity: 'script_scheduler', entityName: 'Script' },",
						"    { name: 'wf_definition', entity: 'wf_definition', entityName: 'Workflow' },",
						"    {",
						"        name: 'api_authentication',",
						"        entity: 'api_authentication',",
						"        entityName: 'API Authentication',",
						"    },",
						"    { name: 'systems', entity: 'systems', entityName: 'Remote Systems' },",
						"",
						"    { name: 'api_group', entity: 'api_group', entityName: 'API Group' },",
						"    { name: 'api', entity: 'api', entityName: 'API', relations: ['roles'] },",
						"    { name: 'jsclass', entity: 'jsscript', entityName: 'Script' },",
						"    { name: 'odataSource', entity: 'odata_source', entityName: 'oDataSource' },",
						"    { name: 'connector', entity: 'connector', entityName: 'Connector' },",
						"    {",
						"        name: 'rulesengine',",
						"        entity: 'rulesengine',",
						"        entityName: 'Rules Engine',",
						"        relations: ['roles'],",
						"    },",
						"    { name: 'department', entity: 'department', entityName: 'Group', relations: ['roles'] },",
						"    { name: 'tile', entity: 'tile', entityName: 'Tile', relations: ['roles'] },",
						"    {",
						"        name: 'dictionary',",
						"        entity: 'dictionary',",
						"        entityName: 'Table',",
						"        relations: ['rolesRead', 'rolesWrite'],",
						"    },",
						"    {",
						"        name: 'apps',",
						"        entity: 'app_runtime',",
						"        entityName: 'Application',",
						"        relations: ['apis'],",
						"    },",
						"    {",
						"        name: 'category',",
						"        entity: 'category',",
						"        entityName: 'Tile Group',",
						"        relations: ['roles', 'tiles'],",
						"    },",
						"    { name: 'launchpad', entity: 'launchpad', entityName: 'Launchpad', relations: ['cat'] },",
						"    {",
						"        name: 'reports',",
						"        entity: 'reports',",
						"        entityName: 'Adaptive Framework',",
						"        relations: ['roles', 'scriptSelObj', 'scriptRunObj', 'tableObj'],",
						"    },",
						"];",
						"",
						"const artifactsPath = path.join(process.cwd(), 'artifacts');",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(artifactsPath, 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function deployPackageFile(devPackage, url, token) {",
						"    try {",
						"        await axios.post(`${url}/api/functions/Package/SaveDeployPackage`, devPackage, {",
						"            httpsAgent: agent,",
						"            headers: {",
						"                'Authorization': `Bearer ${token}`,",
						"            }",
						"        });",
						"    } catch (e) {",
						"        console.log(`Error sending development package to: ${url}`, e);",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"",
						"        for (let i = 0; i < packageRelationsAndEntityType.length; i++) {",
						"",
						"            const artifactType = packageRelationsAndEntityType[i];",
						"            const artifacts = devPackage[artifactType.name];",
						"",
						"            if (!artifacts?.length) continue;",
						"",
						"            const artifactTypePath = path.join(artifactsPath, artifactType.entityName);",
						"            for (let y = 0; y < artifacts.length; y++) {",
						"                const artifact = artifacts[y]",
						"                const filename = `${artifact.name || artifact.title || artifact.application}-${artifact.id}`;",
						"                devPackage[artifactType.name][y] = JSON.parse(await readFile(path.join(artifactTypePath, filename) + '.json', 'utf-8') as string);",
						"            }",
						"        }",
						"",
						"        for (let i = 0; i < servers.length; i++) {",
						"            await deployPackageFile(devPackage, servers[i].url, servers[i].token);",
						"        }",
						"        console.log('Package has been deployed');",
						"    } catch (e) {",
						"        console.log('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"head": "6863dd76e1c1a5c8045bba50e2d96e457ce495fe"
				},
				"name": "neptunesoftware-dxp-abb-datamodeller",
				"description": null,
				"ver": "23.6.20.1010",
				"enableCICD": true
			}
		},
		{
			"id": "7e99a724-63e6-4693-a355-4c3b90e7f777",
			"application": "neptune_modeller_graph",
			"title": "",
			"description": "",
			"package": {
				"id": "405a932e-033f-ed11-a27c-a04a5ebc99b7",
				"createdAt": "2022-09-28T07:57:22.750Z",
				"updatedAt": "2023-09-19T13:56:17.257Z",
				"createdBy": "kristin.eliassen@neptune-software.com",
				"changedBy": "kristin.eliassen@neptune-software.com",
				"git": {
					"targetServers": [],
					"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-datamodeller",
					"testServers": [],
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"14.16.0\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^26.0.23\",",
						"    \"typescript\": \"^4.2.3\",",
						"    \"ts-node\": \"^10.0.0\",",
						"    \"axios\": \"^0.21.1\",",
						"    \"jest\": \"^27.0.4\",",
						"    \"ts-jest\": \"^27.0.3\"",
						"  }",
						"}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from \"fs\";",
						"",
						"const servers = (process.env.P9_SERVER_URL && process.env.P9_SERVER_TOKEN)",
						"    ? [{url: process.env.P9_SERVER_URL, token: process.env.P9_SERVER_TOKEN}]",
						"    : JSON.parse(`[]`);",
						"",
						"const agent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"const packageRelationsAndEntityType: {",
						"    name: string;",
						"    entity: string;",
						"    entityName?: string;",
						"    relations?: string[];",
						"    dependencies?: string[];",
						"}[] = [",
						"    { name: 'role', entity: 'role', entityName: 'Role' },",
						"    { name: 'wf_notifications', entity: 'wf_notifications', entityName: 'Email Template' },",
						"    { name: 'certificates', entity: 'certificates', entityName: 'Certificates' },",
						"    { name: 'odataMock', entity: 'odata_mockdata', entityName: 'oDataMock' },",
						"    { name: 'theme', entity: 'theme', entityName: 'Theme' },",
						"    { name: 'pdf', entity: 'pdf', entityName: 'PDF' },",
						"    { name: 'doc', entity: 'doc', entityName: 'Documentation' },",
						"    { name: 'jsscript_group', entity: 'jsscript_group', entityName: 'Script Project' },",
						"    { name: 'script_scheduler', entity: 'script_scheduler', entityName: 'Script' },",
						"    { name: 'wf_definition', entity: 'wf_definition', entityName: 'Workflow' },",
						"    {",
						"        name: 'api_authentication',",
						"        entity: 'api_authentication',",
						"        entityName: 'API Authentication',",
						"    },",
						"    { name: 'systems', entity: 'systems', entityName: 'Remote Systems' },",
						"",
						"    { name: 'api_group', entity: 'api_group', entityName: 'API Group' },",
						"    { name: 'api', entity: 'api', entityName: 'API', relations: ['roles'] },",
						"    { name: 'jsclass', entity: 'jsscript', entityName: 'Script' },",
						"    { name: 'odataSource', entity: 'odata_source', entityName: 'oDataSource' },",
						"    { name: 'connector', entity: 'connector', entityName: 'Connector' },",
						"    {",
						"        name: 'rulesengine',",
						"        entity: 'rulesengine',",
						"        entityName: 'Rules Engine',",
						"        relations: ['roles'],",
						"    },",
						"    { name: 'department', entity: 'department', entityName: 'Group', relations: ['roles'] },",
						"    { name: 'tile', entity: 'tile', entityName: 'Tile', relations: ['roles'] },",
						"    {",
						"        name: 'dictionary',",
						"        entity: 'dictionary',",
						"        entityName: 'Table',",
						"        relations: ['rolesRead', 'rolesWrite'],",
						"    },",
						"    {",
						"        name: 'apps',",
						"        entity: 'app_runtime',",
						"        entityName: 'Application',",
						"        relations: ['apis'],",
						"    },",
						"    {",
						"        name: 'category',",
						"        entity: 'category',",
						"        entityName: 'Tile Group',",
						"        relations: ['roles', 'tiles'],",
						"    },",
						"    { name: 'launchpad', entity: 'launchpad', entityName: 'Launchpad', relations: ['cat'] },",
						"    {",
						"        name: 'reports',",
						"        entity: 'reports',",
						"        entityName: 'Adaptive Framework',",
						"        relations: ['roles', 'scriptSelObj', 'scriptRunObj', 'tableObj'],",
						"    },",
						"];",
						"",
						"const artifactsPath = path.join(process.cwd(), 'artifacts');",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(artifactsPath, 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function deployPackageFile(devPackage, url, token) {",
						"    try {",
						"        await axios.post(`${url}/api/functions/Package/SaveDeployPackage`, devPackage, {",
						"            httpsAgent: agent,",
						"            headers: {",
						"                'Authorization': `Bearer ${token}`,",
						"            }",
						"        });",
						"    } catch (e) {",
						"        console.log(`Error sending development package to: ${url}`, e);",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"",
						"        for (let i = 0; i < packageRelationsAndEntityType.length; i++) {",
						"",
						"            const artifactType = packageRelationsAndEntityType[i];",
						"            const artifacts = devPackage[artifactType.name];",
						"",
						"            if (!artifacts?.length) continue;",
						"",
						"            const artifactTypePath = path.join(artifactsPath, artifactType.entityName);",
						"            for (let y = 0; y < artifacts.length; y++) {",
						"                const artifact = artifacts[y]",
						"                const filename = `${artifact.name || artifact.title || artifact.application}-${artifact.id}`;",
						"                devPackage[artifactType.name][y] = JSON.parse(await readFile(path.join(artifactTypePath, filename) + '.json', 'utf-8') as string);",
						"            }",
						"        }",
						"",
						"        for (let i = 0; i < servers.length; i++) {",
						"            await deployPackageFile(devPackage, servers[i].url, servers[i].token);",
						"        }",
						"        console.log('Package has been deployed');",
						"    } catch (e) {",
						"        console.log('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"head": "6863dd76e1c1a5c8045bba50e2d96e457ce495fe"
				},
				"name": "neptunesoftware-dxp-abb-datamodeller",
				"description": null,
				"ver": "23.6.20.1010",
				"enableCICD": true
			}
		},
		{
			"id": "3a6d5bc4-a7c8-4e8e-a12e-737a93f2f7e7",
			"application": "neptune_modeller_script",
			"title": "",
			"description": "",
			"package": {
				"id": "405a932e-033f-ed11-a27c-a04a5ebc99b7",
				"createdAt": "2022-09-28T07:57:22.750Z",
				"updatedAt": "2023-09-19T13:56:17.257Z",
				"createdBy": "kristin.eliassen@neptune-software.com",
				"changedBy": "kristin.eliassen@neptune-software.com",
				"git": {
					"targetServers": [],
					"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-datamodeller",
					"testServers": [],
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"14.16.0\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^26.0.23\",",
						"    \"typescript\": \"^4.2.3\",",
						"    \"ts-node\": \"^10.0.0\",",
						"    \"axios\": \"^0.21.1\",",
						"    \"jest\": \"^27.0.4\",",
						"    \"ts-jest\": \"^27.0.3\"",
						"  }",
						"}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from \"fs\";",
						"",
						"const servers = (process.env.P9_SERVER_URL && process.env.P9_SERVER_TOKEN)",
						"    ? [{url: process.env.P9_SERVER_URL, token: process.env.P9_SERVER_TOKEN}]",
						"    : JSON.parse(`[]`);",
						"",
						"const agent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"const packageRelationsAndEntityType: {",
						"    name: string;",
						"    entity: string;",
						"    entityName?: string;",
						"    relations?: string[];",
						"    dependencies?: string[];",
						"}[] = [",
						"    { name: 'role', entity: 'role', entityName: 'Role' },",
						"    { name: 'wf_notifications', entity: 'wf_notifications', entityName: 'Email Template' },",
						"    { name: 'certificates', entity: 'certificates', entityName: 'Certificates' },",
						"    { name: 'odataMock', entity: 'odata_mockdata', entityName: 'oDataMock' },",
						"    { name: 'theme', entity: 'theme', entityName: 'Theme' },",
						"    { name: 'pdf', entity: 'pdf', entityName: 'PDF' },",
						"    { name: 'doc', entity: 'doc', entityName: 'Documentation' },",
						"    { name: 'jsscript_group', entity: 'jsscript_group', entityName: 'Script Project' },",
						"    { name: 'script_scheduler', entity: 'script_scheduler', entityName: 'Script' },",
						"    { name: 'wf_definition', entity: 'wf_definition', entityName: 'Workflow' },",
						"    {",
						"        name: 'api_authentication',",
						"        entity: 'api_authentication',",
						"        entityName: 'API Authentication',",
						"    },",
						"    { name: 'systems', entity: 'systems', entityName: 'Remote Systems' },",
						"",
						"    { name: 'api_group', entity: 'api_group', entityName: 'API Group' },",
						"    { name: 'api', entity: 'api', entityName: 'API', relations: ['roles'] },",
						"    { name: 'jsclass', entity: 'jsscript', entityName: 'Script' },",
						"    { name: 'odataSource', entity: 'odata_source', entityName: 'oDataSource' },",
						"    { name: 'connector', entity: 'connector', entityName: 'Connector' },",
						"    {",
						"        name: 'rulesengine',",
						"        entity: 'rulesengine',",
						"        entityName: 'Rules Engine',",
						"        relations: ['roles'],",
						"    },",
						"    { name: 'department', entity: 'department', entityName: 'Group', relations: ['roles'] },",
						"    { name: 'tile', entity: 'tile', entityName: 'Tile', relations: ['roles'] },",
						"    {",
						"        name: 'dictionary',",
						"        entity: 'dictionary',",
						"        entityName: 'Table',",
						"        relations: ['rolesRead', 'rolesWrite'],",
						"    },",
						"    {",
						"        name: 'apps',",
						"        entity: 'app_runtime',",
						"        entityName: 'Application',",
						"        relations: ['apis'],",
						"    },",
						"    {",
						"        name: 'category',",
						"        entity: 'category',",
						"        entityName: 'Tile Group',",
						"        relations: ['roles', 'tiles'],",
						"    },",
						"    { name: 'launchpad', entity: 'launchpad', entityName: 'Launchpad', relations: ['cat'] },",
						"    {",
						"        name: 'reports',",
						"        entity: 'reports',",
						"        entityName: 'Adaptive Framework',",
						"        relations: ['roles', 'scriptSelObj', 'scriptRunObj', 'tableObj'],",
						"    },",
						"];",
						"",
						"const artifactsPath = path.join(process.cwd(), 'artifacts');",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(artifactsPath, 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function deployPackageFile(devPackage, url, token) {",
						"    try {",
						"        await axios.post(`${url}/api/functions/Package/SaveDeployPackage`, devPackage, {",
						"            httpsAgent: agent,",
						"            headers: {",
						"                'Authorization': `Bearer ${token}`,",
						"            }",
						"        });",
						"    } catch (e) {",
						"        console.log(`Error sending development package to: ${url}`, e);",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"",
						"        for (let i = 0; i < packageRelationsAndEntityType.length; i++) {",
						"",
						"            const artifactType = packageRelationsAndEntityType[i];",
						"            const artifacts = devPackage[artifactType.name];",
						"",
						"            if (!artifacts?.length) continue;",
						"",
						"            const artifactTypePath = path.join(artifactsPath, artifactType.entityName);",
						"            for (let y = 0; y < artifacts.length; y++) {",
						"                const artifact = artifacts[y]",
						"                const filename = `${artifact.name || artifact.title || artifact.application}-${artifact.id}`;",
						"                devPackage[artifactType.name][y] = JSON.parse(await readFile(path.join(artifactTypePath, filename) + '.json', 'utf-8') as string);",
						"            }",
						"        }",
						"",
						"        for (let i = 0; i < servers.length; i++) {",
						"            await deployPackageFile(devPackage, servers[i].url, servers[i].token);",
						"        }",
						"        console.log('Package has been deployed');",
						"    } catch (e) {",
						"        console.log('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"head": "6863dd76e1c1a5c8045bba50e2d96e457ce495fe"
				},
				"name": "neptunesoftware-dxp-abb-datamodeller",
				"description": null,
				"ver": "23.6.20.1010",
				"enableCICD": true
			}
		},
		{
			"id": "2c046191-f0b3-46dc-936a-7102a8cde845",
			"application": "datamodeller",
			"title": "",
			"description": "",
			"package": {
				"id": "405a932e-033f-ed11-a27c-a04a5ebc99b7",
				"createdAt": "2022-09-28T07:57:22.750Z",
				"updatedAt": "2023-09-19T13:56:17.257Z",
				"createdBy": "kristin.eliassen@neptune-software.com",
				"changedBy": "kristin.eliassen@neptune-software.com",
				"git": {
					"targetServers": [],
					"remote": "https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-datamodeller",
					"testServers": [],
					"packageJSON": [
						"==OBJECT STRING==",
						"{",
						"  \"name\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"version\": \"1.0.0\",",
						"  \"description\": \"com.neptune-software.pt.apps.tableVisualizer\",",
						"  \"author\": \"Neptune Software\",",
						"  \"license\": \"LicenseRef-LICENSE\",",
						"  \"private\": true,",
						"  \"scripts\": {",
						"    \"deploy\": \"ts-node src/deploy.ts\",",
						"    \"test\": \"jest --passWithNoTests\"",
						"  },",
						"  \"engines\": {",
						"    \"node\": \"14.16.0\"",
						"  },",
						"  \"devDependencies\": {",
						"    \"@types/jest\": \"^26.0.23\",",
						"    \"typescript\": \"^4.2.3\",",
						"    \"ts-node\": \"^10.0.0\",",
						"    \"axios\": \"^0.21.1\",",
						"    \"jest\": \"^27.0.4\",",
						"    \"ts-jest\": \"^27.0.3\"",
						"  }",
						"}",
						""
					],
					"deploy": [
						"==OBJECT STRING==",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"import * as path from 'path';",
						"import * as fs from \"fs\";",
						"",
						"const servers = (process.env.P9_SERVER_URL && process.env.P9_SERVER_TOKEN)",
						"    ? [{url: process.env.P9_SERVER_URL, token: process.env.P9_SERVER_TOKEN}]",
						"    : JSON.parse(`[]`);",
						"",
						"const agent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"const packageRelationsAndEntityType: {",
						"    name: string;",
						"    entity: string;",
						"    entityName?: string;",
						"    relations?: string[];",
						"    dependencies?: string[];",
						"}[] = [",
						"    { name: 'role', entity: 'role', entityName: 'Role' },",
						"    { name: 'wf_notifications', entity: 'wf_notifications', entityName: 'Email Template' },",
						"    { name: 'certificates', entity: 'certificates', entityName: 'Certificates' },",
						"    { name: 'odataMock', entity: 'odata_mockdata', entityName: 'oDataMock' },",
						"    { name: 'theme', entity: 'theme', entityName: 'Theme' },",
						"    { name: 'pdf', entity: 'pdf', entityName: 'PDF' },",
						"    { name: 'doc', entity: 'doc', entityName: 'Documentation' },",
						"    { name: 'jsscript_group', entity: 'jsscript_group', entityName: 'Script Project' },",
						"    { name: 'script_scheduler', entity: 'script_scheduler', entityName: 'Script' },",
						"    { name: 'wf_definition', entity: 'wf_definition', entityName: 'Workflow' },",
						"    {",
						"        name: 'api_authentication',",
						"        entity: 'api_authentication',",
						"        entityName: 'API Authentication',",
						"    },",
						"    { name: 'systems', entity: 'systems', entityName: 'Remote Systems' },",
						"",
						"    { name: 'api_group', entity: 'api_group', entityName: 'API Group' },",
						"    { name: 'api', entity: 'api', entityName: 'API', relations: ['roles'] },",
						"    { name: 'jsclass', entity: 'jsscript', entityName: 'Script' },",
						"    { name: 'odataSource', entity: 'odata_source', entityName: 'oDataSource' },",
						"    { name: 'connector', entity: 'connector', entityName: 'Connector' },",
						"    {",
						"        name: 'rulesengine',",
						"        entity: 'rulesengine',",
						"        entityName: 'Rules Engine',",
						"        relations: ['roles'],",
						"    },",
						"    { name: 'department', entity: 'department', entityName: 'Group', relations: ['roles'] },",
						"    { name: 'tile', entity: 'tile', entityName: 'Tile', relations: ['roles'] },",
						"    {",
						"        name: 'dictionary',",
						"        entity: 'dictionary',",
						"        entityName: 'Table',",
						"        relations: ['rolesRead', 'rolesWrite'],",
						"    },",
						"    {",
						"        name: 'apps',",
						"        entity: 'app_runtime',",
						"        entityName: 'Application',",
						"        relations: ['apis'],",
						"    },",
						"    {",
						"        name: 'category',",
						"        entity: 'category',",
						"        entityName: 'Tile Group',",
						"        relations: ['roles', 'tiles'],",
						"    },",
						"    { name: 'launchpad', entity: 'launchpad', entityName: 'Launchpad', relations: ['cat'] },",
						"    {",
						"        name: 'reports',",
						"        entity: 'reports',",
						"        entityName: 'Adaptive Framework',",
						"        relations: ['roles', 'scriptSelObj', 'scriptRunObj', 'tableObj'],",
						"    },",
						"];",
						"",
						"const artifactsPath = path.join(process.cwd(), 'artifacts');",
						"",
						"async function readFile(",
						"    path: fs.PathLike,",
						"    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,",
						"): Promise<string | Buffer> {",
						"    return new Promise((resolve, reject) => {",
						"        fs.readFile(path, options, (err, data) => {",
						"            err ? reject(err) : resolve(data);",
						"        });",
						"    });",
						"}",
						"",
						"async function readPackageFile() {",
						"    const content = await readFile(path.join(artifactsPath, 'dev_package.json'), 'utf-8') as string;",
						"    return JSON.parse(content);",
						"}",
						"",
						"async function deployPackageFile(devPackage, url, token) {",
						"    try {",
						"        await axios.post(`${url}/api/functions/Package/SaveDeployPackage`, devPackage, {",
						"            httpsAgent: agent,",
						"            headers: {",
						"                'Authorization': `Bearer ${token}`,",
						"            }",
						"        });",
						"    } catch (e) {",
						"        console.log(`Error sending development package to: ${url}`, e);",
						"    }",
						"}",
						"",
						"(async () => {",
						"    try {",
						"        const devPackage = await readPackageFile();",
						"",
						"        for (let i = 0; i < packageRelationsAndEntityType.length; i++) {",
						"",
						"            const artifactType = packageRelationsAndEntityType[i];",
						"            const artifacts = devPackage[artifactType.name];",
						"",
						"            if (!artifacts?.length) continue;",
						"",
						"            const artifactTypePath = path.join(artifactsPath, artifactType.entityName);",
						"            for (let y = 0; y < artifacts.length; y++) {",
						"                const artifact = artifacts[y]",
						"                const filename = `${artifact.name || artifact.title || artifact.application}-${artifact.id}`;",
						"                devPackage[artifactType.name][y] = JSON.parse(await readFile(path.join(artifactTypePath, filename) + '.json', 'utf-8') as string);",
						"            }",
						"        }",
						"",
						"        for (let i = 0; i < servers.length; i++) {",
						"            await deployPackageFile(devPackage, servers[i].url, servers[i].token);",
						"        }",
						"        console.log('Package has been deployed');",
						"    } catch (e) {",
						"        console.log('Failed to deploy package', e);",
						"    }",
						"    process.exit(0);",
						"})();",
						""
					],
					"test": [
						"==OBJECT STRING==",
						"/**",
						" * Example test file after deployment.",
						" */",
						"",
						"import axios from \"axios\";",
						"import * as https from 'https';",
						"",
						"const serverUrl = process.env.DXP_OE_SERVER_URL;",
						"const serverToken = process.env.DXP_OE_SERVER_TOKEN;",
						"",
						"const healtzUrl = (server: string) => `${server}/healthz`;",
						"",
						"const httpsAgent = new https.Agent({",
						"    rejectUnauthorized: false",
						"});",
						"",
						"async function axiosGet(url: string, config: Record<string, unknown> = {}) {",
						"    return axios.get(url, { httpsAgent, headers: {",
						"            'Authorization': `Bearer ${serverToken}`,",
						"        }, ...config});",
						"}",
						"",
						"describe(`Running test script after deployment to ${serverUrl}`, () => {",
						"",
						"    test('Server healtz', async () => {",
						"        const response = await axiosGet(healtzUrl(serverUrl));",
						"        expect(response.status).toBe(200);",
						"    });",
						"",
						"    /**",
						"     * More tests...",
						"     */",
						"});",
						""
					],
					"head": "6863dd76e1c1a5c8045bba50e2d96e457ce495fe"
				},
				"name": "neptunesoftware-dxp-abb-datamodeller",
				"description": null,
				"ver": "23.6.20.1010",
				"enableCICD": true
			}
		}
	],
	"api": [],
	"odataSource": [],
	"odataMock": [],
	"dictionary": [],
	"jsclass": [],
	"jsscript_group": [],
	"theme": [],
	"pdf": [],
	"rulesengine": [],
	"reports": [],
	"api_authentication": [],
	"api_group": [],
	"tile": [
		{
			"id": "50aceafc-bf81-4bbd-b9db-8d2945490d93",
			"description": "Visualize table definitions and foreign key connections",
			"name": "DataModeller"
		}
	],
	"category": [],
	"launchpad": [],
	"certificates": [],
	"role": [
		{
			"id": "7ce84102-81c3-4ba7-a14d-fd0e255a89d0",
			"name": "neptunesoftware-datamodeller",
			"description": null
		}
	],
	"systems": [],
	"doc": [],
	"wf_notifications": [],
	"department": [],
	"script_scheduler": [],
	"wf_definition": [],
	"connector": [],
	"events": [],
	"code_snippets": [],
	"wf_determination": [],
	"wf_taskaction": []
}