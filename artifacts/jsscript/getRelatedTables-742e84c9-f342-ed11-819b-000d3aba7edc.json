{
	"id": "742e84c9-f342-ed11-819b-000d3aba7edc",
	"createdAt": "2022-10-03T08:17:15.370Z",
	"createdBy": "kristin.eliassen@neptune-software.com",
	"globalScripts": [],
	"externalModules": [
		{
			"id": "88CDE492-9935-ED11-A27C-E42AAC61C092",
			"name": "typeorm",
			"contextname": "typeorm",
			"path": "typeorm"
		}
	],
	"entitySets": [],
	"apis": [],
	"name": "getRelatedTables",
	"ver": "22.10.3.844",
	"description": null,
	"content": [
		"==OBJECT STRING==",
		"const data = req.body;",
		"const tableId = data.id;",
		"",
		"function formatTableToX6Format(data) {",
		"",
		"    let formattedData = [];",
		"",
		"    data.forEach((table, index) => {",
		"        let formattedTable = {};",
		"",
		"        const positionX = index === 0 ? 0 : 175 * (index + 1);",
		"        const positionY = index === 0 ? 0 : 100 * (index + 1);",
		"",
		"        formattedTable.id = table.id;",
		"        formattedTable.shape = \"er-rect\";",
		"        formattedTable.label = table.name;",
		"        formattedTable.width = 300;",
		"        formattedTable.height = 24;",
		"        formattedTable.position = {",
		"            x: positionX,",
		"            y: positionY,",
		"        };",
		"",
		"        formattedTable.attrs = {",
		"            body: {",
		"                fill: '#F6B221',",
		"                stroke: '#F6B221'",
		"            },",
		"            label: {",
		"                fill: 'black'",
		"            }",
		"        }",
		"",
		"        formattedTable.ports = [];",
		"",
		"        formattedTable.ports.push({",
		"            id: `${index + 1}-1`,",
		"            group: \"list\",",
		"            attrs: {",
		"                portBody: {",
		"                    class: \"primary\"",
		"                },",
		"                portNameLabel: {",
		"                    text: \"id\",",
		"                },",
		"                portTypeLabel: {",
		"                    text: \"uuid\",",
		"                },",
		"                portPrimaryKey: {",
		"                    text: 'P'",
		"                }",
		"            },",
		"        });",
		"",
		"        table.fields.forEach((field, x) => {",
		"",
		"            const isPrimaryKey = field.isUnique && !field.isNullable;",
		"",
		"            formattedTable.ports.push({",
		"                id: `${index + 1}-${x + 2}`,",
		"                group: 'list',",
		"                attrs: {",
		"                    portBody: {",
		"                        class: isPrimaryKey ? \"primary\" : \"\"",
		"                    },",
		"                    portNameLabel: {",
		"                        text: field.fieldName,",
		"                    },",
		"                    portTypeLabel: {",
		"                        text: field.fieldType,",
		"                    },",
		"                    portPrimaryKey: {",
		"                        text: isPrimaryKey ? \"P\" : \" \"",
		"                    }",
		"                },",
		"            });",
		"        });",
		"",
		"        formattedData.push(formattedTable);",
		"    });",
		"",
		"    data.forEach((table) => {",
		"        if (table.foreignKeys.length) {",
		"            table.foreignKeys.forEach((key, index) => {",
		"                for (i = 0; i < key.columns.length; i++) {",
		"",
		"",
		"                    let formattedLink = {};",
		"                    formattedLink.foreignKeyId = key.id;",
		"                    formattedLink.id = uuid();",
		"                    formattedLink.shape = \"edge\";",
		"",
		"                    const isCompositeKey = key.columns.length > 1;",
		"                    if (isCompositeKey) {",
		"                        formattedLink.label = `FK ${index + 1}`;",
		"                    };",
		"",
		"",
		"                    const fromTable = formattedData.find(",
		"                        (formattedTable) => formattedTable.label === key.referencedTable",
		"                    );",
		"",
		"                    const toTable = formattedData.find(",
		"                        (formattedTable) => formattedTable.label === table.name",
		"                    );",
		"",
		"                    if (!fromTable || !toTable) return;",
		"",
		"                    const linkSource = fromTable.ports.find(",
		"                        (port) =>",
		"                            port.attrs.portNameLabel.text === key.columns[i].referencedColumnName",
		"                    );",
		"",
		"                    const linkTarget = toTable.ports.find(",
		"                        (port) => port.attrs.portNameLabel.text === key.columns[i].fieldName",
		"                    );",
		"",
		"                    formattedLink.source = {",
		"                        cell: fromTable.id, // table id",
		"                        port: linkSource.id, // e.g. 1-1",
		"                    };",
		"                    formattedLink.target = {",
		"                        cell: toTable.id, // table id",
		"                        port: linkTarget.id, // e.g. 2-4",
		"                    };",
		"                    formattedLink.attrs = {",
		"                        line: {",
		"                            stroke: \"#A2B1C3\",",
		"                            strokeWidth: 2,",
		"                        },",
		"                    };",
		"                    formattedLink.zIndex = 0;",
		"                    formattedData.push(formattedLink);",
		"",
		"                    //log.info(formattedLink)",
		"",
		"                }",
		"",
		"            });",
		"        }",
		"    });",
		"",
		"    return formattedData;",
		"};",
		"",
		"try {",
		"    const manager = modules.typeorm.getConnection().manager;",
		"    const data = await manager.find('dictionary');",
		"",
		"    if (!data) {",
		"        result.data = 'Not found';",
		"        result.statusCode = 404;",
		"        return complete();",
		"    }",
		"",
		"    const selectedTable = data.find(table => table.id === tableId);",
		"",
		"    //log.info(selectedTable);",
		"",
		"    const relatedTableIds = [];",
		"",
		"    if (selectedTable.foreignKeys.length) {",
		"        selectedTable.foreignKeys.forEach(key => {",
		"            relatedTableIds.push(key.referencedTableId)",
		"        });",
		"    };",
		"",
		"    data.forEach(table => {",
		"        if (table.foreignKeys.length) {",
		"            const relatedTable = table.foreignKeys.find(key => key.referencedTableId === tableId);",
		"            if (relatedTable) {",
		"                relatedTableIds.push(table.id);",
		"            }",
		"        }",
		"    })",
		"",
		"",
		"    const relatedTables = [selectedTable];",
		"",
		"    data.forEach(table => {",
		"        if (relatedTableIds.includes(table.id)) {",
		"            relatedTables.push(table);",
		"        }",
		"    })",
		"    //log.info(relatedTables);",
		"",
		"    const formattedData = formatTableToX6Format(relatedTables);",
		"",
		"    //log.info(formattedData);",
		"",
		"    result = {",
		"        originalData: relatedTables,",
		"        formattedData",
		"    };",
		"",
		"    complete();",
		"",
		"} catch (error) {",
		"    log.error('Error in request: ', error);",
		"    result = error;",
		"    return fail();",
		"}",
		""
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "92882a1c-dc0c-ed11-b47a-28187880d3e8",
	"package": "405a932e-033f-ed11-a27c-a04a5ebc99b7"
}